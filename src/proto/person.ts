// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: src/proto/person.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, Metadata, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "films";

export interface Person {
  /** уникальный идентификатор из TMDB */
  themoviedbId: number;
  name: string;
  biography: string;
  birthday: string;
  deathday: string;
  gender: number;
  knownForDepartment: string;
  placeOfBirth: string;
  profilePath: string;
  homepage: string;
  popularity: number;
  imdbId: string;
  adult: boolean;
  alsoKnownAs: string[];
}

export interface PersonResponse {
  id: number;
}

export interface LinkPersonToFilmRequest {
  personId: number;
  filmId: number;
}

export interface LinkPersonToFilmResponse {
  success: boolean;
}

export const FILMS_PACKAGE_NAME = "films";

function createBasePerson(): Person {
  return {
    themoviedbId: 0,
    name: "",
    biography: "",
    birthday: "",
    deathday: "",
    gender: 0,
    knownForDepartment: "",
    placeOfBirth: "",
    profilePath: "",
    homepage: "",
    popularity: 0,
    imdbId: "",
    adult: false,
    alsoKnownAs: [],
  };
}

export const Person: MessageFns<Person> = {
  encode(message: Person, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.themoviedbId !== 0) {
      writer.uint32(8).int32(message.themoviedbId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.biography !== "") {
      writer.uint32(26).string(message.biography);
    }
    if (message.birthday !== "") {
      writer.uint32(34).string(message.birthday);
    }
    if (message.deathday !== "") {
      writer.uint32(42).string(message.deathday);
    }
    if (message.gender !== 0) {
      writer.uint32(48).int32(message.gender);
    }
    if (message.knownForDepartment !== "") {
      writer.uint32(58).string(message.knownForDepartment);
    }
    if (message.placeOfBirth !== "") {
      writer.uint32(66).string(message.placeOfBirth);
    }
    if (message.profilePath !== "") {
      writer.uint32(74).string(message.profilePath);
    }
    if (message.homepage !== "") {
      writer.uint32(82).string(message.homepage);
    }
    if (message.popularity !== 0) {
      writer.uint32(93).float(message.popularity);
    }
    if (message.imdbId !== "") {
      writer.uint32(98).string(message.imdbId);
    }
    if (message.adult !== false) {
      writer.uint32(104).bool(message.adult);
    }
    for (const v of message.alsoKnownAs) {
      writer.uint32(114).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Person {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePerson();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.themoviedbId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.biography = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.birthday = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.deathday = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.gender = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.knownForDepartment = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.placeOfBirth = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.profilePath = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.homepage = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 93) {
            break;
          }

          message.popularity = reader.float();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.imdbId = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.adult = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.alsoKnownAs.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBasePersonResponse(): PersonResponse {
  return { id: 0 };
}

export const PersonResponse: MessageFns<PersonResponse> = {
  encode(message: PersonResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PersonResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePersonResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseLinkPersonToFilmRequest(): LinkPersonToFilmRequest {
  return { personId: 0, filmId: 0 };
}

export const LinkPersonToFilmRequest: MessageFns<LinkPersonToFilmRequest> = {
  encode(message: LinkPersonToFilmRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.personId !== 0) {
      writer.uint32(8).int32(message.personId);
    }
    if (message.filmId !== 0) {
      writer.uint32(16).int32(message.filmId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkPersonToFilmRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkPersonToFilmRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.personId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.filmId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseLinkPersonToFilmResponse(): LinkPersonToFilmResponse {
  return { success: false };
}

export const LinkPersonToFilmResponse: MessageFns<LinkPersonToFilmResponse> = {
  encode(message: LinkPersonToFilmResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkPersonToFilmResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkPersonToFilmResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface PersonServiceClient {
  upsertPerson(request: Person, metadata?: Metadata): Observable<PersonResponse>;

  linkPersonToFilm(request: LinkPersonToFilmRequest, metadata?: Metadata): Observable<LinkPersonToFilmResponse>;
}

export interface PersonServiceController {
  upsertPerson(
    request: Person,
    metadata?: Metadata,
  ): Promise<PersonResponse> | Observable<PersonResponse> | PersonResponse;

  linkPersonToFilm(
    request: LinkPersonToFilmRequest,
    metadata?: Metadata,
  ): Promise<LinkPersonToFilmResponse> | Observable<LinkPersonToFilmResponse> | LinkPersonToFilmResponse;
}

export function PersonServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["upsertPerson", "linkPersonToFilm"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PersonService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PersonService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PERSON_SERVICE_NAME = "PersonService";

export type PersonServiceService = typeof PersonServiceService;
export const PersonServiceService = {
  upsertPerson: {
    path: "/films.PersonService/UpsertPerson",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Person): Buffer => Buffer.from(Person.encode(value).finish()),
    requestDeserialize: (value: Buffer): Person => Person.decode(value),
    responseSerialize: (value: PersonResponse): Buffer => Buffer.from(PersonResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): PersonResponse => PersonResponse.decode(value),
  },
  linkPersonToFilm: {
    path: "/films.PersonService/LinkPersonToFilm",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: LinkPersonToFilmRequest): Buffer =>
      Buffer.from(LinkPersonToFilmRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): LinkPersonToFilmRequest => LinkPersonToFilmRequest.decode(value),
    responseSerialize: (value: LinkPersonToFilmResponse): Buffer =>
      Buffer.from(LinkPersonToFilmResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): LinkPersonToFilmResponse => LinkPersonToFilmResponse.decode(value),
  },
} as const;

export interface PersonServiceServer extends UntypedServiceImplementation {
  upsertPerson: handleUnaryCall<Person, PersonResponse>;
  linkPersonToFilm: handleUnaryCall<LinkPersonToFilmRequest, LinkPersonToFilmResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
